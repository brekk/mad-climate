import type { Either } from "Either"

import type { Arg } from "@/Core"
import type { Flag } from "@/Flag"

import { Left, Right } from "Either"
import Parse from "Parse"
import String from "String"

import { ArgBoolean, ArgFloat, ArgInteger, ArgString, ArgTrailing } from "@/Core"
import { Flag } from "@/Flag"



invertedFlag :: Parse.Parser #[String, Arg]
export invertedFlag = do {
  _ <- Parse.string("--no-")
  key <- Parse.manyTill(Parse.anyChar, Parse.char(' '))

  return of(#[String.fromList(key), ArgBoolean(false)])
}


flag :: Parse.Parser #[String, Arg]
export flag = do {
  _ <- Parse.some(Parse.char('-'))
  key <- Parse.manyTill(Parse.anyChar, Parse.char(' '))

  return of(#[String.fromList(key), ArgBoolean(true)])
}

flagWithValue :: Parse.Parser #[String, Arg]
export flagWithValue = do {
  _ <- Parse.some(Parse.char('-'))
  key <- Parse.manyTill(Parse.anyChar, Parse.choice([Parse.char('='), Parse.char(' ')]))
  value <- Parse.manyTill(Parse.anyChar, Parse.char(' '))

  return of(#[String.fromList(key), ArgString(String.fromList(value))])
}

export type ArgParser r = ArgParser(Arg -> Either String r)

getParserFn :: ArgParser a -> Arg -> Either String a
getParserFn = (parser) => where(parser) {
  ArgParser(fn) =>
    fn
}

argValue :: Parse.Parser #[String, Arg]
export argValue = do {
  _ <- alt(Parse.spaces, pure([]))
  return Parse.choice([flag, flagWithValue, invertedFlag])
}

parseValue :: ArgParser a -> Arg -> Either String a
export parseValue = (parser, input) => where(parser) {
  ArgParser(parserFn) =>
    parserFn(input)
}

parse :: ArgParser a -> String -> Either String a
export parse = (parser, input) => pipe(
  Parse.runParser(argValue),
  where {
    Left(e) =>
      Left("Invalid arg: " ++ show(e))

    Right(#[k, parsed]) =>
      where(parser) {
        ArgParser(parserFn) =>
          parserFn(parsed)
      }
  },
)(input)
