import type { Error } from "File"
import type { Wish } from "Wish"

import File from "File"
import IO from "IO"
import Json from "Json/Parse"
import List from "List"
import Math from "Math"
import { Just, Nothing } from "Maybe"
import { interval, subscribe } from "Stream"
import String from "String"
import Wish from "Wish"

import { tap, untap } from "@/Fn"



type TimerId = TimerId
type IntervalId = IntervalId

#iftarget js

setInterval :: Integer -> ({} -> {}) -> Integer
setInterval = (ms, cb) => #- setInterval(cb, ms) -#

clearInterval :: Integer -> {}
clearInterval = (n) => #- clearInterval(n) -#

setTimeout :: ({} -> {}) -> Integer -> TimerId
setTimeout = (cb, ms) => #- setTimeout(cb, ms) -#

clearTimeout :: TimerId -> {}
clearTimeout = (id) => #- clearTimeout(id) -#

clearConsole :: {} -> {}
clearConsole = () => #- console.clear() -#

#elseif llvm

setTimeout :: ({} -> {}) -> Integer -> TimerId
setTimeout = extern "__setTimeout__"

clearTimeout :: TimerId -> {}
clearTimeout = extern "__clearTimeout__"

#endif



// #elseif llvm

// setTimeout :: ({} -> {}) -> Integer -> TimerId
// setTimeout = extern "__setTimeout__"

// clearTimeout :: TimerId -> {}
// clearTimeout =  extern "__clearTimeout__"

#endif


saveCursor :: {} -> {}
export saveCursor = () => {
  #- console.clear() -#
  IO.put("\x1b7")
}

restoreCursor :: {} -> {}
export restoreCursor = () => {
  IO.put("\x1b8")
}

cursory :: String -> a -> a
cursory = (x, a) => do {
  saveCursor()
  IO.putLine(x)
  restoreCursor()
  return a
}

COOL_FRAMES = [
  `          `,
  `▁         `,
  `▃         `,
  `▄         `,
  `▅         `,
  `▆         `,
  `▇         `,
  `█▁        `,
  `█▃        `,
  `█▄        `,
  `█▅        `,
  `█▆        `,
  `██▁       `,
  `██▃       `,
  `██▄       `,
  `██▅       `,
  `██▆       `,
  `███▁      `,
  `███▃      `,
  `███▄      `,
  `███▅      `,
  `███▆      `,
  `████▆     `,
  `█████▁    `,
  `█████▃    `,
  `█████▄    `,
  `█████▅    `,
  `█████▆    `,
  `██████▆   `,
  `███████▁  `,
  `███████▃  `,
  `███████▄  `,
  `███████▅  `,
  `███████▆  `,
  `████████▁ `,
  `████████▃ `,
  `████████▄ `,
  `████████▅ `,
  `████████▆ `,
  `█████████ `,
  `█████████▁`,
  `█████████▃`,
  `█████████▄`,
  `█████████▅`,
  `█████████▆`,
  `██████████`,
  ` █████████`,
  `  ████████`,
  `   ███████`,
  `    ██████`,
  `     █████`,
  `      ████`,
  `       ███`,
  `        ██`,
  `         █`,
  `          `,
]

// type Spinner e a = Spinner(Stream e a, String)
// alias FrameStream = { quit :: a -> a, stop :: {} -> {} }

enspin :: Integer -> List String -> {} -> {}
enspin = (framerate, frames) => {
  frameCount = List.length(frames)
  saveCursor()
  next = (i) => {
    restoreCursor()
    where(List.nth(i % frameCount, frames)) {
      Just(f) =>
        IO.put(f)

      _ =>
        IO.put("")
    }
  }
  stop = subscribe(() => {}, next, () => { stop() }, interval(framerate))
  return stop
}


spinner :: Integer -> List String -> Wish e a -> Wish e a
spinner = (framerate, frames, wish) => {
  stop = enspin(framerate, frames)
  return bimap(
    (e) => {
      stop()
      return e
    },
    (x) => {
      stop()
      return x
    },
  )(wish)
}




delay :: Integer -> Wish e a -> Wish e a
export delay = (time, wish) => Wish.Wish(
  (bad, good) => {
    id = TimerId
    where(wish) {
      Wish.Wish(run) =>
        run(bad, (a) => { id = setTimeout(() => { good(a) }, time) })
    }
    return () => {
      clearTimeout(id)
    }
  },
)

virtue = spinner(30, COOL_FRAMES)

type MadlibJson
  = MadlibJson({
    // importAliases :: Maybe #[String, String],
    main :: String,
    name :: String,
    version :: String,
  })

parso = Json.map3(
  (name, version, m) => MadlibJson({ name, version, main: m }),
  Json.field("name", Json.string),
  Json.field("version", Json.string),
  Json.field("main", Json.string),
)
// Json.field("importAliases", Json.maybe(J.lazy((_) => parso))),


main = () => {
  pipe(
    cursory("reading..."),
    File.read,
    map(Json.parse(parso)),
    delay(3000),
    virtue,
    Wish.fulfill((e) => { IO.trace("BAD", e) }, (x) => { IO.log(x) }),
  )("./madlib.json")
}
